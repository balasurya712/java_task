$gt-greater than
$lt-less than
$ne- not equal

db.collection.find().sort({field: /* 1 for asc,-1 for desc*/})

$exists - only checks if the key exists in the document
and does not care about the value

query to display the 6-10 document by skiping the first 5 documents
db.collection.find().skip(5).limit(5)


$elemMatch
operator matches documents that contain an array field with at least 
one element that matches all the specified query criteria.

eg:
{ _id: 1, results: [ 82, 85, 88 ] }
{ _id: 2, results: [ 75, 88, 89 ] }

query:
db.scores.find(
   { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
)

output:
{ "_id" : 1, "results" : [ 82, 85, 88 ] }

eg:
{ "_id": 1, "results": [ { "product": "abc", "score": 10 },
                            { "product": "xyz", "score": 5 } ] },
   { "_id": 2, "results": [ { "product": "abc", "score": 8 },
                            { "product": "xyz", "score": 7 } ] },
   { "_id": 3, "results": [ { "product": "abc", "score": 7 },
                            { "product": "xyz", "score": 8 } ] },
   { "_id": 4, "results": [ { "product": "abc", "score": 7 },
                            { "product": "def", "score": 8 } ] }
query
db.survey.find(
   { results: { $elemMatch: { product: "xyz"} } }
)



$and - give the condition in array
eg:
db.restaurants.find(
               {$and:
                    [
                       {"cuisine" : {$ne :"American "}},
                       {"grades.score" : {$gt : 70}},
                       {"address.coord" : {$lt : -65.754168}}
                    ]
                }
                    );


{"name": /^Wil/} return"name" starts with the letters "Wil"
{name: /ces$/} return names end with 'ces'
{"name": /.*Reg.*/} return names contain 'reg'

$in- return the document which match with any element in array

eg:
{"key" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}}

$nin - not in array
$not

ISODate("2014-08-11T00:00:00Z")-formate the date

eg:

{
"grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
}

 
qus-the 2nd element of grades array contains a grade of "A" and score 9 
on an ISODate "2014-08-11T00:00:00Z".

query:
db.restaurants.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   );


qus-query to know whether all the addresses contains the street or not.

db.address.find(
                     {"street" : 
                         { $exists : true } 
                     } 
                   );

$type - check the data type of value
Double-1
String-2
Object-3
Array-4

que-documents in the restaurants collection where the coord field value is double.

db.restaurants.find(
                    {"address.coord" : 
                       {$type : 1}
                    }
                   );

$mod : [7,0] search only documents where the score field is divisible by 7 
and gives reminder 0

$regex-regular expression
{ <field>: { $regex: /pattern/, $options: '<options>' } }

eg:
{ name: { $regex: 'acme.*corp', $options: 'i', $nin: [ 'acmeblahcorp' ] } }
it return name start with 'acme' and end with 'corp

$lookup - Performs a left outer join

{
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
}


